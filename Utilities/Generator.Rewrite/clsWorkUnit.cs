using System;
using System.Collections.Generic;
using System.Text;

using System.IO;
using System.Diagnostics;
using Newtonsoft.Json;

namespace OpenTK.Rewrite
{
    //TODO: Find better name?
    [DebuggerDisplay("{OpenTKBindingsBase}")]
    public class clsWorkUnit
    {
        public string AssemblyExecutable { get; set; }

        public string AssemblyOutput { get; set; }

        public string AssemblyKeyFile { get; set; }

        /// <summary>
        /// BindingBase
        /// </summary>
        /// <returns></returns>
        public string OpenTKBindingsBase { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public string OpenTKOpenGLFunctionAttribute { get; set; }

        /// <summary>
        /// The name of the field containg functionname on OpenTKOpenGLFunctionAttribute
        /// </summary>
        /// <returns></returns>
        public string OpenTKOpenGLFunctionFieldName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public string OpenTKOpenGLSlotAttribute { get; set; }

        /// <summary>
        /// RewrittenAttribyteName. Needs to skip the Attribute part of the name thou.
        /// </summary>
        /// <returns></returns>
        public string OpenTKRewrittenAttribute { get; set; }

        /// <summary>
        /// Enable Debug write?
        /// </summary>
        /// <returns></returns>
        public bool Debug { get; set; }

        protected clsWorkUnit()
        {
            //PartialClasses = new string[];
        }

        public static clsWorkUnit FromFile(string filenamepath)
        {
            if (!File.Exists(filenamepath))
                throw new FileNotFoundException();

            var content = File.ReadAllText(filenamepath);

            //var work = new clsWorkUnit();

            var work = JsonConvert.DeserializeObject<clsWorkUnit>(content, new JsonSerializerSettings()
            {
                // no options yet.
            });

            work.FillInTheBlanks();

            return work;
        }

        private void FillInTheBlanks()
        {
            if (string.IsNullOrEmpty(OpenTKBindingsBase))
                this.OpenTKBindingsBase = "OpenTK.BindingsBase";

            if (string.IsNullOrEmpty(OpenTKRewrittenAttribute))
                this.OpenTKRewrittenAttribute = "Rewritten";

            if (string.IsNullOrEmpty(OpenTKOpenGLFunctionAttribute))
                this.OpenTKOpenGLFunctionAttribute = "AutoGenerated";

            if (string.IsNullOrWhiteSpace(OpenTKOpenGLFunctionFieldName))
                this.OpenTKOpenGLFunctionFieldName = "EntryPoint";

            if (string.IsNullOrWhiteSpace(OpenTKOpenGLSlotAttribute))
                this.OpenTKOpenGLSlotAttribute = "Slot";

            // if no output set, write to same place we loaded from.
            if (string.IsNullOrWhiteSpace(AssemblyOutput))
                this.AssemblyOutput = this.AssemblyExecutable;
        }
    }
}
